<?php 
namespace Validator;use Exception;class FormValidator{private $default=['minLength'=>0,'maxLength'=>200,'email'=>['type'=>'Regexp','validate'=>"/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/"],'name'=>['type'=>'Regexp','validate'=>"/[a-zA-Z\s]{5,50}$/"],'url'=>['type'=>'Regexp','validate'=>"/^(http|https):\/\/[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}(/?)([a-zA-Z0-9\-\._\?\,\'\/\\\+&%\$#\=~])*/"],'linkedin'=>['type'=>'Regexp','validate'=>"^(https?://)?(www\.)?linkedin\.com/in/[\w-]+/?$"],'password'=>['type'=>'Regexp','validate'=>"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,30}$"]];public $avoid=[];private $Values;private $Validations;function __construct(array $Values,array $Validations=[],array $options=[]){$this->Values=$Values;$this->Validations=$Validations;if(isset($options['default']['minLength'])){$this->default['minLength']=$options['default']['minLength'];}if(isset($options['default']['maxLength'])){$this->default['maxLength']=$options['default']['maxLength'];}if(isset($options['avoid'])){$this->avoid=$options['avoid'];}$this->review_valitations();}private function review_valitations():void{$types=['Regexp','Length','Options'];foreach($this->Validations as $key=>$value){if(!in_array($value['type'],$types)){$this->Validations[$key]['type']='Length';}}}private function viaLength(string $name,string $text):bool{$quantitymax=(isset($this->Validations[$name]['validate']["max"]))?$this->Validations[$name]['validate']["max"]:$this->default['maxLength'];$quantitymin=(isset($this->Validations[$name]['validate']["min"]))?$this->Validations[$name]['validate']["min"]:$this->default['minLength'];return(strlen($text)<=$quantitymax&&strlen($text)>=$quantitymin);}private function viaRegExp(string $value,string $validator):bool{return(preg_match($validator,$value)==1)?true:false;}private function viaOptions(string $name,array $options):bool{return in_array($this->Values[$name],$options);}public function add_validation(string $name,array $validator=['type'=>'Length']){$this->Validations[$name]=$validator;}public function get_error_message(string $name){$message='';$validation=isset($this->Validations[$name])?$this->Validations[$name]:$this->default[$name];if(isset($validation['message'])){$message=$validation['message'];}else if($validation['type']=='Length'){$max=(isset($validation['validate']['max']))?$validation['validate']['max']:$this->default['maxLength'];$min=(isset($validation['validate']['min']))?$validation['validate']['min']:$this->default['minLength'];$message='Must contain between '.$min.' and '.$max.' characters';}else if($validation['type']=='Options'){$message='Selected option is incorrect';}else{$message='Field input is invalid';}return $message;}public function validate(string $name):bool{try{if(in_array($name,$this->avoid)){throw new Exception('This input is being avoided. Please, enter a valid value or remove the "'.$name.'" element of the <strong>$avoid</strong> array');}$is_custom=isset($this->Validations[$name]);$is_default=isset($this->default[$name]);if(!$is_custom&&!$is_default){throw new Exception('The input name do not exist. Please, enter a valid value');}$value=$this->Values[$name];$type=($is_custom)?$this->Validations[$name]['type']:$this->default[$name]['type'];if($type=='Regexp'){$validator=($is_custom)?$this->Validations[$name]['validate']:$this->default[$name]['validate'];return $this->viaRegExp($value,$validator);}if($type=='Options'){$options=$this->Validations[$name]['validate'];return $this->viaOptions($name,$options);}if($type=='Length'){return $this->viaLength($name,$value);}throw new Exception('The validator type is invalid. The type must be <strong>"Regexp"</strong>, <strong>"Options"</strong> or <strong>"Length"</strong>');}catch(Exception $error){echo "<span><strong>Error:</strong> ",$error->getMessage(),"</span>";return false;}}public function get_results():array{$results=[];foreach($this->Values as $name=>$value){if(!in_array($name,$this->avoid)){if(isset($this->Validations[$name])||isset($this->default[$name])){$results[$name]=$this->validate($name);}}}return $results;}public function execute():bool{$results=$this->get_results();return!in_array(false,$results);}}